<project name="orchem.project" default="help" basedir=".">

    <property name="app.name"      value="orchem"/>
    <property name="compile.debug" value="true"/>
    <property name="project.root"  value="."/>
    <property name="src.dir"       value="${project.root}/src"/>
    <property name="web.dir"       value="${project.root}/public_html"/>
    <property name="test.dir"      value="${project.root}/test"/>
    <property name="build.classes" value="${web.dir}/WEB-INF/classes"/>
    <property name="lib.dir"       value="${web.dir}/WEB-INF/lib"/>
    <property name="lib.prefix"    value="public_html/WEB-INF/lib"/>

    <property name="war.dir"       value="${project.root}/deploy"/>
    <property name="dist.dir"      value="${project.root}/dist"/>

    <!-- Build working classpath -->
    <path id="project.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${build.classes}"/>
        <pathelement path="${src.dir}"/>
    </path>

    <!--  =================================-->
    <!--  Prints usuage                   -->
    <!--  =====+++++=======================-->
    <target name="help">
        <echo message="***************************************************************************"/>
        <echo message="The following ANT targets are available in the build.xml:"/>
        <echo message="clean         - delete all build directories, as well as /build files "/>
        <echo message="compile       - compile core classes"/>
        <echo message="war           - clean, compile, and create WAR file (tested Tomcat6) "/>
        <echo message="dist          - make a tar.gz for OrChem releases "/>
        <echo message="***************************************************************************"/>
    </target>


    <!-- ===================================================================  -->
    <!-- Clean the build directories and war file                             -->
     <!-- =================================================================== -->
    <target name="clean">
        <echo message="Cleaning up compiled classes and other temp data in ${web.dir}"/>
        <delete>
           <fileset dir="${build.classes}" includes="**/orchem*.*"/>
        </delete>
        <delete dir="${build.classes}/.jsps"  />
        <delete dir="${build.classes}/.tags"  />
        <delete dir="${build.classes}/.wlLibs"/>
        <delete dir="${build.classes}/uk"     />
        <delete dir="${build.classes}/org"     />

        <echo message="Deleting old war file.."/>
        <delete file="${war.dir}/*.war"/>
        <delete file="${build.classes}/webapp.properties"/>
        <delete file="${build.classes}/unittest.properties"/>
    </target>
 


    <!-- =================================================================== -->
    <!-- Compile                                                             -->
    <!-- =================================================================== -->
    <target name="compile">
        <!-- compile the Java classes  -->
        <javac srcdir="${src.dir}" destdir="${build.classes}">
            <classpath refid="project.classpath"/>
            <include name="**/*.java"/>
            <exclude name="**/PubChemImport.java"/>
            <!--exclude name="**/ImageServlet.java"/-->
            
        </javac>
        <copy file="${project.root}/properties/my_local_copies/unittest.properties" tofile="${build.classes}/unittest.properties" overwrite="true"/>
        <copy file="${project.root}/properties/my_local_copies/webapp.properties" tofile="${build.classes}/webapp.properties" overwrite="true"/>
    </target>


    <!-- =================================================================== -->
    <!-- Make WAR                                                            -->
    <!-- =================================================================== -->
    <target name="war" depends="clean,compile">
        
        <echo message="Making WAR file"/>
        <mkdir dir="${war.dir}"/>
        
        <!-- we have several web.xml versions. make sure the tomcat version is copied to web.xml before jar runs -->
        <copy file="${web.dir}/WEB-INF/web.tomcat6.xml" tofile="${web.dir}/WEB-INF/web.xml" overwrite="true"/>

        <jar jarfile="${war.dir}/${app.name}.war" basedir="${web.dir}"
            includes="**" excludes="**/junit.jar **/cdk-1.1.2.jar **/*servlet*.jar **/lucene*.jar **/jgrapht*.jar **/vecmath.jar **/old " />

        <!-- put the default webXXXxml back in place -->
        <copy file="${web.dir}/WEB-INF/web.jdev11.xml" tofile="${web.dir}/WEB-INF/web.xml" overwrite="true"/>

    </target>

    <!-- =================================================================== -->
    <!-- Unittest substructure searching                                     -->
    <!-- =================================================================== -->
    <target name="test.substr" depends="compile">

        <echo />
        <echo message="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"/>
        <echo message=" JUnit test: substructure searching       "/>
        <echo message="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"/>

        <!-- easiest way to make this work is to put junit.jar in the ANT_HOME/lib dir. But see also ant manual .. -->
        <junit>
           <classpath refid="project.classpath" />
           <formatter type="brief" usefile="false" />
           <test name="uk.ac.ebi.orchem.test.TestSubstructureSearch" />
        </junit>

        <echo message="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"/>
        <echo />
    </target>

    <!-- =================================================================== -->
    <!-- Unittest similarity searching                                       -->
    <!-- =================================================================== -->
    <target name="test.simsrch" depends="compile">

        <echo />
        <echo message="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"/>
        <echo message=" JUnit test: similarity searching       "/>
        <echo message="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"/>

        <!-- easiest way to make this work is to put junit.jar in the ANT_HOME/lib dir. But see also ant manual .. -->
        <junit>
           <classpath refid="project.classpath" />
           <formatter type="brief" usefile="false" />
           <test name="uk.ac.ebi.orchem.test.TestSimilaritySearch" />
        </junit>

        <echo message="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"/>
        <echo />
    </target>

    <!-- =================================================================== -->
    <!-- Make a tarball for people to download and install OrChem.           -->
    <!-- Not all classes are required, just the 'core' set that go into DB   -->
    <!-- =================================================================== -->
    <target name="dist" depends="compile">
      <echo message="Making a distro"/>

      <delete dir="${dist.dir}"/>
      <mkdir dir="${dist.dir}"/>
      <mkdir dir="${dist.dir}"/>
      <mkdir dir="${dist.dir}/sql"/>


      <!-- Copy the DDL create scripts we need -->
      <copy todir="${dist.dir}/sql">
        <fileset dir="${project.root}/sql">
           <include name="**/*.sql"/>
           <include name="**/*.plsql"/>
           <exclude name="**/drop.sql"/>
        </fileset>
      </copy>
      <!-- For user convenience, remove the sql*plus "exit;" commands (put there for step1.pl in Unit testing) -->
      <replace dir="${dist.dir}/sql" token="exit 1;" value=" ">
        <include name="**/*.sql"/>
        <include name="**/*.plsql"/>
      </replace>

      <!-- Put required OrChem classes in a temporary jar -->
      <jar jarfile="${lib.dir}/${app.name}.jar" basedir="${build.classes}"
           includes="**/uk/ac/ebi/orchem/bean/* 
                     **/uk/ac/ebi/orchem/search/*  
                     **/uk/ac/ebi/orchem/load/*  
                     **/uk/ac/ebi/orchem/fingerprint/* 
                     **/uk/ac/ebi/orchem/fingerprint/bitpos/*
                     **/uk/ac/ebi/orchem/shared/AtomsBondsCounter.class
                     **/uk/ac/ebi/orchem/temp/MyAllRingsFinder.class
                     **/uk/ac/ebi/orchem/shared/MoleculeCreator.class
                     **/uk/ac/ebi/orchem/Utils.class
                     **/uk/ac/ebi/orchem/test/VerifyOrchem.class
                     **/uk/ac/ebi/orchem/SimpleMail.class
                     **/uk/ac/ebi/orchem/db/OrChemParameters.class
                     **/uk/ac/ebi/orchem/singleton/FingerPrinterAgent.class
                     " />

      <!-- Put all required jar files and DDL in a tar file -->
      <tar destfile="${dist.dir}/${app.name}.tar">
        <tarfileset dir="${lib.dir}" prefix="/orchem/lib/">
          <include name="vecmath.jar"/>
          <include name="commons-collections-3.2.1.jar"/>
          <include name="jgrapht-0.6.0.jar"/>
          <include name="log4j-1.2.15.jar"/>
          <include name="cdk.jar"/>
          <include name="${app.name}.jar"/>
        </tarfileset>
        <tarfileset dir="${dist.dir}/sql" prefix="/orchem/sql/">
          <include name="*.sql"/>
          <include name="*.plsql"/>
        </tarfileset>
      </tar>

      <gzip zipfile="${dist.dir}/${app.name}.tar.gz" src="${dist.dir}/${app.name}.tar" />
      <!--zip destfile="${dist.dir}/${app.name}.tar.zip" basedir="${dist.dir}" includes="**/*.tar" /-->

      <delete file="${dist.dir}/${app.name}.tar"/> 
      <delete dir="${dist.dir}/sql"/> 

    </target>



</project>
