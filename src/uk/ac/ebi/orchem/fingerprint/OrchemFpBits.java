package uk.ac.ebi.orchem.fingerprint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.openscience.cdk.interfaces.IBond;


public class OrchemFpBits {

    //TODO how about a ring count in orchem_compounds - should be useful really !
    
    //TODO apply singleton pattern
    //http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html

    //think the rings should move up the food chain

    static Map<String, Integer> elemCntBits = new HashMap<String, Integer>();
    static Map<String, Integer> atomPairBits = new HashMap<String, Integer>();
    static Map<Integer, List<Neighbour>> neighbourBits = new HashMap<Integer, List<Neighbour> >();

    static Map<String, Integer> ringSetBits = new HashMap<String, Integer>();
    static String ringsetCountTotalPrefix=new String("RsCT");
    static String ringsetCountBySizePrefix=new String("RsCS");
    static String ringsetPairPrefix=new String("RsCP");

    static {
        int bitPos = 0;
        elemCntBits.put("C20", bitPos++);
        elemCntBits.put("C24", bitPos++);
        elemCntBits.put("C28", bitPos++);
        elemCntBits.put("C32", bitPos++);
        elemCntBits.put("Cl1", bitPos++);
        elemCntBits.put("Cl2", bitPos++);
        elemCntBits.put("F1", bitPos++);
        elemCntBits.put("F3", bitPos++);
        elemCntBits.put("N3", bitPos++);
        elemCntBits.put("N4", bitPos++);
        elemCntBits.put("N5", bitPos++);  
        elemCntBits.put("N6", bitPos++);
        elemCntBits.put("O3", bitPos++);
        elemCntBits.put("O5", bitPos++);
        elemCntBits.put("O7", bitPos++);
        elemCntBits.put("O12", bitPos++);
        elemCntBits.put("O16", bitPos++);
        elemCntBits.put("S1", bitPos++);
        elemCntBits.put("S2", bitPos++);
        elemCntBits.put("Br1", bitPos++);
        elemCntBits.put("Br2", bitPos++);
        elemCntBits.put("P1", bitPos++);
        elemCntBits.put("P2", bitPos++);
        elemCntBits.put("I1", bitPos++);  //..
        elemCntBits.put("Na1", bitPos++);
        elemCntBits.put("B1", bitPos++);
        elemCntBits.put("Si1", bitPos++);
        elemCntBits.put("Pt1", bitPos++);
        elemCntBits.put("K1", bitPos++);
        elemCntBits.put("Se1", bitPos++);
        elemCntBits.put("Li1", bitPos++);
        elemCntBits.put("Au1", bitPos++);
        elemCntBits.put("Tc1", bitPos++);
        elemCntBits.put("Fe1", bitPos++);
        elemCntBits.put("Cu1", bitPos++);
        elemCntBits.put("R1", bitPos++);
        elemCntBits.put("Ru1", bitPos++);
        elemCntBits.put("Zn1", bitPos++);
        elemCntBits.put("Mn1", bitPos++);
        elemCntBits.put("Te1", bitPos++);
        elemCntBits.put("Sn1", bitPos++);
        elemCntBits.put("Co1", bitPos++);
        elemCntBits.put("Re1", bitPos++);
        elemCntBits.put("As1", bitPos++);
        atomPairBits.put("O-O",bitPos++);
        atomPairBits.put("N-O",bitPos++); 
        atomPairBits.put("S-O",bitPos++);
        atomPairBits.put("Cl-O",bitPos++);
        atomPairBits.put("P-O",bitPos++);
        atomPairBits.put("Na-O",bitPos++);
        atomPairBits.put("B-O",bitPos++);
        atomPairBits.put("Si-O",bitPos++);
        atomPairBits.put("N-N",bitPos++);
        atomPairBits.put("S-N",bitPos++);
        atomPairBits.put("Cl-N",bitPos++);
        atomPairBits.put("P-N",bitPos++); 
        atomPairBits.put("I-N",bitPos++);
        atomPairBits.put("B-N",bitPos++);
        atomPairBits.put("S-S",bitPos++);
        atomPairBits.put("F-S",bitPos++);
        atomPairBits.put("P-S",bitPos++);
        atomPairBits.put("P-F",bitPos++);
        atomPairBits.put("B-F",bitPos++);
        atomPairBits.put("Si-F",bitPos++);
        atomPairBits.put("P-Cl",bitPos++);

        /* TODO - this is peculiar. Non aromatic would subset match aromatic, but not the other way round. Could set true to null for this section */
        Neighbour[] myArray=null;
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("Br",null,null),new Neighbour("C",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("Br",null,null),new Neighbour("C",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("Br",null,null),new Neighbour("N",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("Br",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("N",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("O",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("N",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("O",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("Cl",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("N",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("O",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("O",null,null),new Neighbour("O",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("P",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("S",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("I",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,true),new Neighbour("I",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("Si",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("C",null,true),new Neighbour("N",null,true)}; 
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("N",null,true)}; 
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("N",null,true),new Neighbour("N",null,true)}; 
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("Cl",null,null),new Neighbour("Cl",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,true),new Neighbour("Cl",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("F",null,null),new Neighbour("F",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,true),new Neighbour("F",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("F",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("N",null,null),new Neighbour("N",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,true),new Neighbour("N",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,true),new Neighbour("C",null,true),new Neighbour("N",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,true),new Neighbour("N",null,true),new Neighbour("N",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("N",null,true),new Neighbour("N",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("O",null,null),new Neighbour("O",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("O",null,null),new Neighbour("C",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("O",null,null),new Neighbour("C",null,true),new Neighbour("C",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("S",null,null),new Neighbour("C",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("S",null,null),new Neighbour("N",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,true),new Neighbour("C",null,true),new Neighbour("C",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,true),new Neighbour("C",null,true),new Neighbour("N",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,true),new Neighbour("N",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",null,true),new Neighbour("N",null,true),new Neighbour("N",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("N",null,null),new Neighbour("O",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("N",null,null),new Neighbour("N",null,true),new Neighbour("N",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("C",null,null),new Neighbour("N",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("C",null,null),new Neighbour("O",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("C",null,null),new Neighbour("C",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("C",null,null),new Neighbour("C",null,true),new Neighbour("C",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("O",null,null),new Neighbour("O",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("O",null,null),new Neighbour("O",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("C",null,true),new Neighbour("C",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("C",null,true),new Neighbour("C",null,true),new Neighbour("C",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("O",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("O",null,null),new Neighbour("C",null,null),new Neighbour("P",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("O",null,null),new Neighbour("C",null,null),new Neighbour("N",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("O",null,null),new Neighbour("C",null,true),new Neighbour("C",null,true)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("P",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("P",null,null),new Neighbour("O",null,null),new Neighbour("O",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("P",null,null),new Neighbour("N",null,null),new Neighbour("N",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("S",null,null),new Neighbour("C",null,null),new Neighbour("C",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("S",null,null),new Neighbour("C",null,null),new Neighbour("O",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("S",null,null),new Neighbour("N",null,null),new Neighbour("O",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("S",null,null),new Neighbour("N",null,null),new Neighbour("O",null,null),new Neighbour("O",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("N",null,true),new Neighbour("N",null,true),new Neighbour("Cl",null,null)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));

        // more restrictive than PubChem
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",IBond.Order.DOUBLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",IBond.Order.TRIPLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("N",IBond.Order.DOUBLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("N",IBond.Order.TRIPLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("O",IBond.Order.DOUBLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("S",IBond.Order.DOUBLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("N",IBond.Order.DOUBLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("O",IBond.Order.DOUBLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("P",IBond.Order.DOUBLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("P",null,null),new Neighbour("O",IBond.Order.DOUBLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("P",null,null),new Neighbour("P",IBond.Order.DOUBLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",IBond.Order.TRIPLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("N",IBond.Order.TRIPLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",IBond.Order.DOUBLE,false),new Neighbour("C",IBond.Order.SINGLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("N",IBond.Order.DOUBLE,false),new Neighbour("C",IBond.Order.SINGLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("C",IBond.Order.SINGLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("Cl",IBond.Order.SINGLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",IBond.Order.DOUBLE,false),new Neighbour("N",IBond.Order.SINGLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("N",IBond.Order.DOUBLE,false),new Neighbour("N",IBond.Order.SINGLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("N",IBond.Order.SINGLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("O",IBond.Order.SINGLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("N",IBond.Order.DOUBLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("Cl",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("C",IBond.Order.DOUBLE,false),new Neighbour("N",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("N",IBond.Order.DOUBLE,false),new Neighbour("N",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("N",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("C",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("O",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("C",IBond.Order.DOUBLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("N",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("O",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("P",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("O",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("S",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("C",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("S",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("O",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("S",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("O",IBond.Order.DOUBLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));
        myArray=new Neighbour[]{ new Neighbour("S",null,null),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("O",IBond.Order.DOUBLE,false),new Neighbour("O",IBond.Order.SINGLE,false)};
        neighbourBits.put(bitPos++, Arrays.asList(myArray));


        ringSetBits.put(ringsetCountTotalPrefix+"1",bitPos++);
        ringSetBits.put(ringsetCountTotalPrefix+"2",bitPos++);
        ringSetBits.put(ringsetCountTotalPrefix+"3",bitPos++);
        ringSetBits.put(ringsetCountTotalPrefix+"4",bitPos++);

        ringSetBits.put(ringsetCountBySizePrefix+"2",bitPos++);
        ringSetBits.put(ringsetCountBySizePrefix+"3",bitPos++);
        ringSetBits.put(ringsetCountBySizePrefix+"4",bitPos++);
        ringSetBits.put(ringsetCountBySizePrefix+"5",bitPos++);
        ringSetBits.put(ringsetCountBySizePrefix+"6",bitPos++);
        ringSetBits.put(ringsetCountBySizePrefix+"8",bitPos++);
        ringSetBits.put(ringsetCountBySizePrefix+"10",bitPos++);
        ringSetBits.put(ringsetCountBySizePrefix+"30",bitPos++);

        ringSetBits.put(ringsetPairPrefix+"3_3",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"3_4",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"3_5",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"3_6",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"3_7",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"3_8",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"4_3",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"4_5",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"4_6",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"4_7",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"4_8",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"5_5",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"5_6",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"5_7",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"5_8",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"6_7",bitPos++);
        ringSetBits.put(ringsetPairPrefix+"6_8",bitPos++);
        
    }



}
